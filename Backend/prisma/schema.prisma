generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enumeraciones
enum BEACH_TYPE {
  RURAL
  NATURAL
  POPULATED
  URBAN
}

enum STUDY_LEVEL {
  SECONDARY_UNIVERSITY
  GRADUATE_UNIVERSITY
  SPECIALIZATION
  MASTER
  DOCTORATE
}

enum EXPERIENCE_YEARS {
  LESS_5
  BETWEEN_5_10
  BETWEEN_11_15
  BETWEEN_16_20
  MORE_THAN_20
}

// Modelos

model Beach {
  id            Int          @id @default(autoincrement())
  name          String
  beachType     BEACH_TYPE
  city          String
  state         String
  country       String
  coordinates   String
  evaluations   Evaluation[]
}

model Expert {
  id                  Int                          @id @default(autoincrement())
  name                String
  email               String                       @unique
  institution         String
  codeNode            String
  studyLevel          STUDY_LEVEL
  experienceYears     EXPERIENCE_YEARS
  graduatedDate       String
  specializationAreas SpecializationAreaOnExpert[]
  evaluations         Evaluation[]
}

model Evaluation {
  id              Int               @id @default(autoincrement())
  expert          Expert            @relation(fields: [expertId], references: [id])
  expertId        Int
  beach           Beach             @relation(fields: [beachId], references: [id])
  beachId         Int
  year            Int
  finalEvaluation Float
  description     String
  images          EvaluationImage[]
  indicatorScores IndicatorScore[]
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  indicators  Indicator[]
}

model Indicator {
  id          Int         @id @default(autoincrement())
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  name        String
  scores      IndicatorScore[]
}

model IndicatorScore {
  id           Int        @id @default(autoincrement())
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])
  evaluationId Int
  indicator    Indicator  @relation(fields: [indicatorId], references: [id])
  indicatorId  Int
  score        Float
}

model EvaluationImage {
  id           Int        @id @default(autoincrement())
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])
  evaluationId Int
  url          String
  author       String
}

model SpecializationArea {
  id      Int                          @id @default(autoincrement())
  name    String                       @unique
  experts SpecializationAreaOnExpert[]
}

model SpecializationAreaOnExpert {
  id                   Int        @id @default(autoincrement()) // Nuevo campo de ID Ãºnico
  expertId             Int
  specializationAreaId Int
  expert               Expert             @relation(fields: [expertId], references: [id])
  specializationArea   SpecializationArea @relation(fields: [specializationAreaId], references: [id])
}
