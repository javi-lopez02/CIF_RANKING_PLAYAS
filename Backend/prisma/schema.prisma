generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enumeraciones
enum BEACH_TYPE {
  RURAL
  NATURAL
  POPULATED
  URBAN
}

enum STUDY_LEVEL {
  SECONDARY_UNIVERSITY
  GRADUATE_UNIVERSITY
  SPECIALIZATION
  MASTER
  DOCTORATE
}

enum EXPERIENCE_YEARS {
  LESS_5
  BETWEEN_5_10
  BETWEEN_11_15
  BETWEEN_16_20
  MORE_THAN_20
}

enum SPECIALITATION_AREA {
  BIOLOGIA_ECOLOGIA
  GEOGRAFIA
  GEOLOGIA
  GESTION_COSTERA
  INGENIERIA
  OCEANOGRAFIA
  QUIMICA
  TURISMO
  OTROS
}

// Modelos

model Beach {
  id          String       @id @default(uuid())
  name        String
  beachType   BEACH_TYPE
  city        String
  state       String
  country     String
  coordinates String
  evaluations Evaluation[]

  //Tipo de playa
  residentialOccupation Int
  stiffening            Int
  mainUse               Int
  environmentalUse      Int
  legalProtection       Int
  services              Int
  landscape             Int
  vehicularAccess       Int
}

model Expert {
  id                  String               @id @default(uuid())
  name                String
  institution         String
  codeNode            String
  studyLevel          STUDY_LEVEL
  experienceYears     EXPERIENCE_YEARS
  graduatedDate       String
  specializationAreas SPECIALITATION_AREA[]
  evaluations         Evaluation[]

  //user-auth
  email     String   @unique
  username  String   @unique
  password  String
  image     String?
  status    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Evaluation {
  id               String            @id @default(uuid())
  expert           Expert            @relation(fields: [expertId], references: [id])
  expertId         String
  ExperienceTypes  ExperienceTypes[]
  expertLastVisit  String
  evaluationYear   Int
  beach            Beach             @relation(fields: [beachId], references: [id])
  beachId          String
  finalEvaluation  Float
  beachDescription String
  beachImages      EvaluationImage[]
  indicatorScores  IndicatorScore[]
}

model Category {
  id         String      @id @default(uuid())
  name       String      @unique
  indicators Indicator[]
}

model Indicator {
  id         String           @id @default(uuid())
  categoryId String
  category   Category         @relation(fields: [categoryId], references: [id])
  name       String
  scores     IndicatorScore[]
}

model IndicatorScore {
  id           String     @id @default(uuid())
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])
  evaluationId String
  indicator    Indicator  @relation(fields: [indicatorId], references: [id])
  indicatorId  String
  score        Float
}

model EvaluationImage {
  id           String     @id @default(uuid())
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])
  evaluationId String
  url          String
  author       String
}

model ExperienceTypes {
  id           String     @id @default(uuid())
  name         String
  evaluationId String
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])
}
